
function [data] = RotateGlobal(data)
%Function used to rotate the global field of reference so it fit the
%recommendation of the International Society of Biomechanics (J. Bmwhanrcs,
%Vol. 28, No. 10. pp. 1257-1261, 1995). The Y axis should be pointing
%upward, the X axis should be pointing in the direction of movement, the Z
%axis should be orthogonal to XY plane. In the RPT, the X axis should be
%aligned with the axis joining the Proximal and Distal targets


%% Load Targets static trials and defining variables


VideoLength=length(fieldnames(data.VideoData));
TrialLength=length(data.VideoData.channel1.xdata);
DistalTargetName='TRGD';
ProximalTargetName='TRGP';
OriginName='CLAV';

%% Find relevent Channels
%Find Proximal and Distal Targets channels in VideoData
for i=VideoLength:-1:1
    s=['isTRGD(' num2str(i) ')=strcmp(data.VideoData.channel' num2str(i) '.label,DistalTargetName);'];eval(s);
    s=['isTRGP(' num2str(i) ')=strcmp(data.VideoData.channel' num2str(i) '.label,ProximalTargetName);'];eval(s);
    s=['isOrigin(' num2str(i) ')=strcmp(data.VideoData.channel' num2str(i) '.label,OriginName);'];eval(s);
end

TRGDchan=find(isTRGD);
TRGPchan=find(isTRGP);
Originchan=find(isOrigin);


%% Translating data so the origin correspond to the OpenSimOrigin.
% The lab reference frame during data 
%collection: z is pointing upward (so it is y). Then change all axes to
%keep the right order (x,y,z)

for i=VideoLength:-1:1
  
    s=['data.VideoData.channel' num2str(i) '.xdata=data.VideoData.channel' num2str(i) '.ydata-mean(data.VideoData.channel' num2str(Originchan) '.ydata);'];eval(s);
    s=['data.VideoData.channel' num2str(i) '.ydata=data.VideoData.channel' num2str(i) '.zdata-mean(data.VideoData.channel' num2str(Originchan) '.zdata;'];eval(s);
    s=['data.VideoData.channel' num2str(i) '.zdata=data.VideoData.channel' num2str(i) '.xdata-data.VideoData.channel' num2str(Originchan) '.xdata;'];eval(s);

end



%% Defining the wanted X axis (TRGP to TRGD) in the current global coordinates
%[X Y Z] vector joining the two targets. It is our final X axis. Mean of 
%static trial to minimize noise.

s=['X1Vector(1)=mean(data.VideoData.channel' num2str(TRGDchan) '.xdata-data.VideoData.channel' num2str(TRGPchan) '.xdata);'];eval(s);
s=['X1Vector(2)=mean(data.VideoData.channel' num2str(TRGDchan) '.ydata-data.VideoData.channel' num2str(TRGPchan) '.ydata);'];eval(s);
s=['X1Vector(3)=mean(data.VideoData.channel' num2str(TRGDchan) '.zdata-data.VideoData.channel' num2str(TRGPchan) '.zdata);'];eval(s);

X1VectorNorm=norm([X1Vector(1) X1Vector(2) X1Vector(3)]); 
X1UnitVector=[X1Vector(1)/X1VectorNorm X1Vector(2)/X1VectorNorm X1Vector(3)/X1VectorNorm];

%% Calculate the rotation needed to get the targeted coordinates (around Y axis)
%[x y 0]=[c ,0,-s;0,1,0; s,0,c][X1UnitVector(1,3)]... isolate rotAngle
%from 0=s*X1UnitVector(1)+c*X1UnitVector(3)+0*X1UnitVector(2)

rotAngle=atan2(-X1UnitVector(3),X1UnitVector(1)); 
Ry=[cos(rotAngle), sin(rotAngle); -sin(rotAngle), cos(rotAngle)]; %Rotation Matrix to apply to all channels

%% Apply the calculated rotation matrix to all data

for i=1:VideoLength
    
    s=['data.VideoData.channel' num2str(i) '.xdata=Ry(1,1)*data.VideoData.channel' num2str(i) '.xdata+Ry(2,1)*data.VideoData.channel' num2str(Originchan) '.zdata;'];eval(s);
    s=['data.VideoData.channel' num2str(i) '.zdata=Ry(1,2)*data.VideoData.channel' num2str(i) '.xdata+Ry(2,2)*data.VideoData.channel' num2str(Originchan) '.zdata;'];eval(s);

end
